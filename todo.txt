Omitted:
 - indexed drawing
 - z-buffering
 - msaa
 - mipmapping

Features:
 - sprite lifecycle
 - instanced drawing

Qualities:
 - color selection
 - text & rubber kerning
 - rare updates
 - workers & multithreading
 - replays

Things happens with one texture:
	Lava.establishVertexBuffer():
		vertexBuffer, vertexBufferSize used in Tectonic::prepareFrame()
		vertexBufferMemory stored privately in lava
	Lava.establishTexture():
		textureImage used in Tectonic::createDescriptorSets()
		textureImageView used in Tectonic::createDescriptorSets()
		textureImageMemory stored privately in lava
	Tectonic::createDescriptorSets():
		descriptorSets[IN_FLIGHT_FRAMES] used in Tectonic::prepareFrame()
		? Do I need to keep IN_FLIGHT_FRAMES descriptor sets instead of single one ? -> because it is linked to uniformBuffers[i]
	Tectonic::prepareFrame() using:
		vertexBuffer, vertexBufferSize
		descriptorSets[IN_FLIGHT_FRAMES]

	So, for every sprite I need to:
		create vertexBuffer
		create vertexBufferSize
		create vertexBufferMemory
		create textureImage
		create textureImageView
		create textureImageMemory
		create descriptorSets[IN_FLIGHT_FRAMES]
		iterate over it in Tectonic::prepareFrame()

	Or, I can obtain descriptorSets[inFlightIndex] and modify it to use current texture

	Or, I can obtain descriptorSet (single one) and modify in to use current texture AND current uniformBuffer

	Or, I can later create lazy hash map for descriptorSets with keys: uniformBuffer + currentTexture + currentTextureSampler
